// Code generated by protoc-gen-go.
// source: runtime.proto
// DO NOT EDIT!

/*
Package faas is a generated protocol buffer package.

It is generated from these files:
	runtime.proto

It has these top-level messages:
	Packet
	StreamRequest
	StreamResponse
*/
package faas

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Cmd int32

const (
	Cmd_Send      Cmd = 0
	Cmd_REPLY     Cmd = 1
	Cmd_BROADCAST Cmd = 2
)

var Cmd_name = map[int32]string{
	0: "Send",
	1: "REPLY",
	2: "BROADCAST",
}
var Cmd_value = map[string]int32{
	"Send":      0,
	"REPLY":     1,
	"BROADCAST": 2,
}

func (x Cmd) String() string {
	return proto.EnumName(Cmd_name, int32(x))
}
func (Cmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Packet struct {
	Topic   string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Event   string `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
	Id      int32  `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Packet) Reset()                    { *m = Packet{} }
func (m *Packet) String() string            { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()               {}
func (*Packet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StreamRequest struct {
	Version int32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Id      string  `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Packet  *Packet `protobuf:"bytes,3,opt,name=packet" json:"packet,omitempty"`
}

func (m *StreamRequest) Reset()                    { *m = StreamRequest{} }
func (m *StreamRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()               {}
func (*StreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StreamRequest) GetPacket() *Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

type StreamResponse struct {
	Version int32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Cmd     Cmd     `protobuf:"varint,2,opt,name=cmd,enum=faas.Cmd" json:"cmd,omitempty"`
	Packet  *Packet `protobuf:"bytes,3,opt,name=packet" json:"packet,omitempty"`
}

func (m *StreamResponse) Reset()                    { *m = StreamResponse{} }
func (m *StreamResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()               {}
func (*StreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StreamResponse) GetPacket() *Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func init() {
	proto.RegisterType((*Packet)(nil), "faas.Packet")
	proto.RegisterType((*StreamRequest)(nil), "faas.StreamRequest")
	proto.RegisterType((*StreamResponse)(nil), "faas.StreamResponse")
	proto.RegisterEnum("faas.Cmd", Cmd_name, Cmd_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Runtime service

type RuntimeClient interface {
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Runtime_StreamClient, error)
}

type runtimeClient struct {
	cc *grpc.ClientConn
}

func NewRuntimeClient(cc *grpc.ClientConn) RuntimeClient {
	return &runtimeClient{cc}
}

func (c *runtimeClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Runtime_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Runtime_serviceDesc.Streams[0], c.cc, "/faas.Runtime/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Runtime_StreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type runtimeStreamClient struct {
	grpc.ClientStream
}

func (x *runtimeStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Runtime service

type RuntimeServer interface {
	Stream(*StreamRequest, Runtime_StreamServer) error
}

func RegisterRuntimeServer(s *grpc.Server, srv RuntimeServer) {
	s.RegisterService(&_Runtime_serviceDesc, srv)
}

func _Runtime_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServer).Stream(m, &runtimeStreamServer{stream})
}

type Runtime_StreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type runtimeStreamServer struct {
	grpc.ServerStream
}

func (x *runtimeStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Runtime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "faas.Runtime",
	HandlerType: (*RuntimeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Runtime_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("runtime.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xb1, 0x4f, 0x84, 0x30,
	0x18, 0xc5, 0xaf, 0x1c, 0x70, 0xf2, 0x79, 0x10, 0x52, 0x6f, 0x20, 0xba, 0x10, 0xe2, 0x80, 0x0e,
	0xc4, 0xe0, 0xe0, 0x7c, 0x87, 0x6e, 0x26, 0x5e, 0x8a, 0x8b, 0x8b, 0xa6, 0xd2, 0x9a, 0x10, 0x2d,
	0x45, 0xe8, 0x5d, 0xe2, 0x7f, 0x6f, 0xe0, 0x3b, 0x86, 0x5b, 0x8c, 0xe3, 0x7b, 0x6d, 0xde, 0xef,
	0xf5, 0x15, 0xfc, 0x6e, 0xd7, 0x98, 0x5a, 0xc9, 0xac, 0xed, 0xb4, 0xd1, 0xd4, 0xfe, 0xe0, 0xbc,
	0x4f, 0x5e, 0xc1, 0xdd, 0xf2, 0xea, 0x53, 0x1a, 0xba, 0x02, 0xc7, 0xe8, 0xb6, 0xae, 0x22, 0x12,
	0x93, 0xd4, 0x63, 0x28, 0x06, 0x57, 0xee, 0x65, 0x63, 0x22, 0x0b, 0xdd, 0x51, 0xd0, 0x00, 0xac,
	0x5a, 0x44, 0xf3, 0x98, 0xa4, 0x0e, 0xb3, 0x6a, 0x41, 0x23, 0x58, 0xb4, 0xfc, 0xe7, 0x4b, 0x73,
	0x11, 0xd9, 0x31, 0x49, 0x97, 0x6c, 0x92, 0xc9, 0x1b, 0xf8, 0xa5, 0xe9, 0x24, 0x57, 0x4c, 0x7e,
	0xef, 0x64, 0x6f, 0x86, 0xab, 0x7b, 0xd9, 0xf5, 0xb5, 0x6e, 0x46, 0x90, 0xc3, 0x26, 0x79, 0x08,
	0x45, 0xce, 0x10, 0x7a, 0x09, 0x6e, 0x3b, 0x56, 0x1b, 0x41, 0xa7, 0xf9, 0x32, 0x1b, 0x1a, 0x67,
	0x58, 0x97, 0x1d, 0xce, 0x12, 0x05, 0xc1, 0x04, 0xe8, 0x5b, 0xdd, 0xf4, 0xf2, 0x0f, 0xc2, 0x05,
	0xcc, 0x2b, 0x85, 0x88, 0x20, 0xf7, 0x30, 0xae, 0x50, 0x82, 0x0d, 0xee, 0xff, 0x70, 0xd7, 0x57,
	0x30, 0x2f, 0x94, 0xa0, 0x27, 0x60, 0x97, 0xb2, 0x11, 0xe1, 0x8c, 0x7a, 0xe0, 0xb0, 0x87, 0xed,
	0xe3, 0x4b, 0x48, 0xa8, 0x0f, 0xde, 0x86, 0x3d, 0xad, 0xef, 0x8b, 0x75, 0xf9, 0x1c, 0x5a, 0xf9,
	0x06, 0x16, 0x0c, 0x17, 0xa7, 0x77, 0xe0, 0x62, 0x49, 0x7a, 0x86, 0xa9, 0x47, 0x9b, 0x9c, 0xaf,
	0x8e, 0x4d, 0x7c, 0x47, 0x32, 0xbb, 0x21, 0xef, 0xee, 0xf8, 0x57, 0xb7, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x6b, 0x2e, 0xb9, 0x0d, 0xbc, 0x01, 0x00, 0x00,
}
