// Code generated by protoc-gen-go.
// source: store.proto
// DO NOT EDIT!

/*
Package store is a generated protocol buffer package.

It is generated from these files:
	store.proto

It has these top-level messages:
	Value
	Filter
	Update
	GetRequest
	GetResponse
	PutRequest
	PutResponse
	DelRequest
	DelResponse
*/
package store

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_Null   Type = 0
	Type_Int    Type = 1
	Type_Float  Type = 2
	Type_Bool   Type = 3
	Type_String Type = 4
	Type_blob   Type = 5
	Type_array  Type = 6
	Type_json   Type = 7
)

var Type_name = map[int32]string{
	0: "Null",
	1: "Int",
	2: "Float",
	3: "Bool",
	4: "String",
	5: "blob",
	6: "array",
	7: "json",
}
var Type_value = map[string]int32{
	"Null":   0,
	"Int":    1,
	"Float":  2,
	"Bool":   3,
	"String": 4,
	"blob":   5,
	"array":  6,
	"json":   7,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Comp int32

const (
	Comp_Eq     Comp = 0
	Comp_Gt     Comp = 1
	Comp_Gte    Comp = 2
	Comp_Lt     Comp = 3
	Comp_Lte    Comp = 4
	Comp_Ne     Comp = 5
	Comp_Exists Comp = 6
)

var Comp_name = map[int32]string{
	0: "Eq",
	1: "Gt",
	2: "Gte",
	3: "Lt",
	4: "Lte",
	5: "Ne",
	6: "Exists",
}
var Comp_value = map[string]int32{
	"Eq":     0,
	"Gt":     1,
	"Gte":    2,
	"Lt":     3,
	"Lte":    4,
	"Ne":     5,
	"Exists": 6,
}

func (x Comp) String() string {
	return proto.EnumName(Comp_name, int32(x))
}
func (Comp) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Op int32

const (
	Op_Inc         Op = 0
	Op_Set         Op = 1
	Op_Unset       Op = 2
	Op_CurrentDate Op = 3
	Op_Min         Op = 4
	Op_Max         Op = 5
	Op_Mul         Op = 6
	Op_SetOnInsert Op = 7
)

var Op_name = map[int32]string{
	0: "Inc",
	1: "Set",
	2: "Unset",
	3: "CurrentDate",
	4: "Min",
	5: "Max",
	6: "Mul",
	7: "SetOnInsert",
}
var Op_value = map[string]int32{
	"Inc":         0,
	"Set":         1,
	"Unset":       2,
	"CurrentDate": 3,
	"Min":         4,
	"Max":         5,
	"Mul":         6,
	"SetOnInsert": 7,
}

func (x Op) String() string {
	return proto.EnumName(Op_name, int32(x))
}
func (Op) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Value struct {
	Type Type   `protobuf:"varint,1,opt,name=type,enum=store.Type" json:"type,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Filter struct {
	Comp  Comp   `protobuf:"varint,1,opt,name=Comp,enum=store.Comp" json:"Comp,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Value *Value `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Filter) GetValue() *Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type Update struct {
	Op    Op     `protobuf:"varint,1,opt,name=op,enum=store.Op" json:"op,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Value *Value `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *Update) Reset()                    { *m = Update{} }
func (m *Update) String() string            { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()               {}
func (*Update) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Update) GetValue() *Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type GetRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Key       string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetResponse struct {
	Namespace string            `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Key       string            `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Entity    map[string]*Value `protobuf:"bytes,3,rep,name=entity" json:"entity,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetResponse) GetEntity() map[string]*Value {
	if m != nil {
		return m.Entity
	}
	return nil
}

type PutRequest struct {
	Namespace string    `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Key       string    `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Filters   []*Filter `protobuf:"bytes,3,rep,name=filters" json:"filters,omitempty"`
	Updates   []*Update `protobuf:"bytes,4,rep,name=updates" json:"updates,omitempty"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PutRequest) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *PutRequest) GetUpdates() []*Update {
	if m != nil {
		return m.Updates
	}
	return nil
}

type PutResponse struct {
	Namespace string            `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Key       string            `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Entity    map[string]*Value `protobuf:"bytes,3,rep,name=entity" json:"entity,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PutResponse) GetEntity() map[string]*Value {
	if m != nil {
		return m.Entity
	}
	return nil
}

type DelRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Key       string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *DelRequest) Reset()                    { *m = DelRequest{} }
func (m *DelRequest) String() string            { return proto.CompactTextString(m) }
func (*DelRequest) ProtoMessage()               {}
func (*DelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type DelResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *DelResponse) Reset()                    { *m = DelResponse{} }
func (m *DelResponse) String() string            { return proto.CompactTextString(m) }
func (*DelResponse) ProtoMessage()               {}
func (*DelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*Value)(nil), "store.Value")
	proto.RegisterType((*Filter)(nil), "store.Filter")
	proto.RegisterType((*Update)(nil), "store.Update")
	proto.RegisterType((*GetRequest)(nil), "store.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "store.GetResponse")
	proto.RegisterType((*PutRequest)(nil), "store.PutRequest")
	proto.RegisterType((*PutResponse)(nil), "store.PutResponse")
	proto.RegisterType((*DelRequest)(nil), "store.DelRequest")
	proto.RegisterType((*DelResponse)(nil), "store.DelResponse")
	proto.RegisterEnum("store.Type", Type_name, Type_value)
	proto.RegisterEnum("store.Comp", Comp_name, Comp_value)
	proto.RegisterEnum("store.Op", Op_name, Op_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Kvs service

type KvsClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error)
	DelAll(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error)
}

type kvsClient struct {
	cc *grpc.ClientConn
}

func NewKvsClient(cc *grpc.ClientConn) KvsClient {
	return &kvsClient{cc}
}

func (c *kvsClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/store.Kvs/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvsClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/store.Kvs/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvsClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := grpc.Invoke(ctx, "/store.Kvs/Del", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvsClient) DelAll(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := grpc.Invoke(ctx, "/store.Kvs/DelAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Kvs service

type KvsServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Del(context.Context, *DelRequest) (*DelResponse, error)
	DelAll(context.Context, *DelRequest) (*DelResponse, error)
}

func RegisterKvsServer(s *grpc.Server, srv KvsServer) {
	s.RegisterService(&_Kvs_serviceDesc, srv)
}

func _Kvs_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Kvs/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvsServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kvs_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvsServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Kvs/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvsServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kvs_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvsServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Kvs/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvsServer).Del(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kvs_DelAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvsServer).DelAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Kvs/DelAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvsServer).DelAll(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kvs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "store.Kvs",
	HandlerType: (*KvsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Kvs_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Kvs_Put_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _Kvs_Del_Handler,
		},
		{
			MethodName: "DelAll",
			Handler:    _Kvs_DelAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("store.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xdd, 0x6a, 0x13, 0x41,
	0x14, 0xce, 0xfe, 0xa6, 0x39, 0x5b, 0x75, 0x9c, 0xab, 0xb5, 0x88, 0x86, 0xbd, 0x69, 0xe8, 0x45,
	0xc0, 0x08, 0x22, 0xd2, 0x1b, 0x6d, 0xd2, 0x50, 0xac, 0x6d, 0x99, 0x5a, 0x41, 0x04, 0x61, 0x9a,
	0x1e, 0x25, 0x3a, 0x9d, 0xd9, 0xee, 0xcc, 0x96, 0xee, 0x4b, 0xf8, 0x48, 0x5e, 0xfb, 0x58, 0x32,
	0xb3, 0x9b, 0x64, 0x55, 0x04, 0x0d, 0x7a, 0x95, 0xb3, 0xdf, 0xf9, 0xbe, 0xf3, 0x3b, 0x27, 0x90,
	0x68, 0xa3, 0x0a, 0x1c, 0xe6, 0x85, 0x32, 0x8a, 0x46, 0xee, 0x23, 0xdb, 0x85, 0xe8, 0x0d, 0x17,
	0x25, 0xd2, 0x87, 0x10, 0x9a, 0x2a, 0xc7, 0xd4, 0xeb, 0x7b, 0x83, 0xdb, 0xa3, 0x64, 0x58, 0x73,
	0x5f, 0x57, 0x39, 0x32, 0xe7, 0xa0, 0x14, 0xc2, 0x0b, 0x6e, 0x78, 0xea, 0xf7, 0xbd, 0xc1, 0x26,
	0x73, 0x76, 0xc6, 0x21, 0xde, 0x9f, 0x0b, 0x83, 0x85, 0x95, 0xef, 0xa9, 0xcb, 0xfc, 0x27, 0xb9,
	0x85, 0x98, 0x73, 0x58, 0xb9, 0xe4, 0x97, 0xe8, 0xe4, 0x3d, 0xe6, 0x6c, 0x9a, 0x41, 0x74, 0x6d,
	0x93, 0xa7, 0x41, 0xdf, 0x1b, 0x24, 0xa3, 0xcd, 0x46, 0xe5, 0x0a, 0x62, 0xb5, 0x2b, 0x7b, 0x07,
	0xf1, 0x59, 0x7e, 0xc1, 0x0d, 0xd2, 0x7b, 0xe0, 0xab, 0x45, 0x82, 0x5e, 0x43, 0x3d, 0xce, 0x99,
	0xaf, 0xd6, 0x0f, 0xbe, 0x0b, 0x30, 0x45, 0xc3, 0xf0, 0xaa, 0x44, 0x6d, 0xe8, 0x7d, 0xe8, 0x59,
	0xa5, 0xce, 0xf9, 0xac, 0x9e, 0x43, 0x8f, 0xad, 0x00, 0x4a, 0x20, 0xf8, 0x8c, 0x55, 0x93, 0xc2,
	0x9a, 0xd9, 0x57, 0x0f, 0x12, 0x27, 0xd7, 0xb9, 0x92, 0x1a, 0xff, 0x56, 0x4f, 0x9f, 0x40, 0x8c,
	0xd2, 0xcc, 0x4d, 0x95, 0x06, 0xfd, 0x60, 0x90, 0x8c, 0x1e, 0x34, 0x25, 0xb6, 0x62, 0x0e, 0x27,
	0x8e, 0x30, 0x91, 0xa6, 0xa8, 0x58, 0xc3, 0xde, 0x9a, 0x42, 0xd2, 0x82, 0x17, 0x81, 0xbd, 0x55,
	0xe0, 0x65, 0xeb, 0xfe, 0x6f, 0x5b, 0x7f, 0xe6, 0x3f, 0xf5, 0xb2, 0x2f, 0x1e, 0xc0, 0x49, 0xb9,
	0x6e, 0xff, 0x74, 0x1b, 0xba, 0x1f, 0xdc, 0xf6, 0x75, 0xd3, 0xc0, 0xad, 0x26, 0x51, 0xfd, 0x26,
	0xd8, 0xc2, 0x6b, 0x89, 0xa5, 0xdb, 0xa1, 0x4e, 0xc3, 0x1f, 0x88, 0xf5, 0x66, 0xd9, 0xc2, 0xeb,
	0x26, 0xea, 0x0a, 0xfa, 0xc7, 0x13, 0x6d, 0xc5, 0xfc, 0xbf, 0x13, 0xdd, 0x05, 0x18, 0xa3, 0x58,
	0xf7, 0x41, 0x6d, 0x43, 0xe2, 0xd4, 0x4d, 0xf7, 0x29, 0x74, 0x75, 0x39, 0x9b, 0xa1, 0xd6, 0x4e,
	0xbc, 0xc1, 0x16, 0x9f, 0x3b, 0x6f, 0x21, 0xb4, 0x97, 0x49, 0x37, 0x20, 0x3c, 0x2a, 0x85, 0x20,
	0x1d, 0xda, 0x85, 0xe0, 0x40, 0x1a, 0xe2, 0xd1, 0x1e, 0x44, 0xfb, 0x42, 0x71, 0x43, 0x7c, 0xeb,
	0x7d, 0xa1, 0x94, 0x20, 0x01, 0x05, 0x88, 0x4f, 0x4d, 0x31, 0x97, 0x1f, 0x49, 0x68, 0xd1, 0x73,
	0xa1, 0xce, 0x49, 0x64, 0xa9, 0xbc, 0x28, 0x78, 0x45, 0x62, 0x0b, 0x7e, 0xd2, 0x4a, 0x92, 0xee,
	0xce, 0xb8, 0x3e, 0x64, 0x1a, 0x83, 0x3f, 0xb9, 0x22, 0x1d, 0xfb, 0x3b, 0xb5, 0x71, 0xbb, 0x10,
	0x4c, 0x0d, 0x12, 0xdf, 0x02, 0x87, 0x86, 0x04, 0x16, 0x38, 0x34, 0x48, 0x42, 0x0b, 0x1c, 0x21,
	0x89, 0x6c, 0x92, 0xc9, 0xcd, 0x5c, 0x1b, 0x4d, 0xe2, 0x9d, 0xf7, 0xe0, 0x1f, 0xe7, 0x75, 0x51,
	0xb3, 0xba, 0xba, 0x53, 0x6c, 0xaa, 0x3b, 0x93, 0x1a, 0x6d, 0x75, 0x77, 0x20, 0xd9, 0x2b, 0x8b,
	0x02, 0xa5, 0x19, 0x73, 0x83, 0x75, 0xc0, 0x57, 0x73, 0x49, 0x42, 0x67, 0xf0, 0x1b, 0x12, 0x39,
	0xa3, 0x14, 0x24, 0xb6, 0xdc, 0x53, 0x34, 0xc7, 0xf2, 0x40, 0x6a, 0x2c, 0x0c, 0xe9, 0x8e, 0xbe,
	0x79, 0x10, 0xbc, 0xbc, 0xd6, 0x74, 0x08, 0xc1, 0x14, 0x0d, 0xbd, 0xdb, 0xbe, 0x1c, 0x37, 0xfb,
	0x2d, 0xfa, 0xeb, 0x31, 0x65, 0x1d, 0xcb, 0x3f, 0x29, 0x57, 0xfc, 0xd5, 0xe3, 0x5f, 0xf2, 0x5b,
	0x4f, 0xa5, 0xe6, 0x8f, 0x51, 0x2c, 0xf9, 0xab, 0xdd, 0x2e, 0xf9, 0xad, 0x85, 0x65, 0x1d, 0xfa,
	0x08, 0xe2, 0x31, 0x8a, 0xe7, 0xe2, 0xcf, 0x25, 0xe7, 0xb1, 0xfb, 0x3f, 0x7e, 0xfc, 0x3d, 0x00,
	0x00, 0xff, 0xff, 0x41, 0x31, 0xf8, 0x56, 0x9e, 0x05, 0x00, 0x00,
}
