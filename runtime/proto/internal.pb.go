// Code generated by protoc-gen-go.
// source: internal.proto
// DO NOT EDIT!

/*
Package runtime is a generated protocol buffer package.

It is generated from these files:
	internal.proto
	store.proto

It has these top-level messages:
	Empty
	Packet
	PipeRequest
	PipeResponse
	SpecializeRequest
	SpecializeResponse
	HealthzResponse
	Filter
	Update
	GetRequest
	GetResponse
	PutRequest
	PutResponse
	DelRequest
	DelResponse
*/
package runtime

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Cmd int32

const (
	Cmd_Send      Cmd = 0
	Cmd_REPLY     Cmd = 1
	Cmd_BROADCAST Cmd = 2
)

var Cmd_name = map[int32]string{
	0: "Send",
	1: "REPLY",
	2: "BROADCAST",
}
var Cmd_value = map[string]int32{
	"Send":      0,
	"REPLY":     1,
	"BROADCAST": 2,
}

func (x Cmd) String() string {
	return proto.EnumName(Cmd_name, int32(x))
}
func (Cmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Packet struct {
	Topic   string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Event   string `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
	Id      int32  `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Packet) Reset()                    { *m = Packet{} }
func (m *Packet) String() string            { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()               {}
func (*Packet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PipeRequest struct {
	Version int32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Id      string  `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Packet  *Packet `protobuf:"bytes,3,opt,name=packet" json:"packet,omitempty"`
}

func (m *PipeRequest) Reset()                    { *m = PipeRequest{} }
func (m *PipeRequest) String() string            { return proto.CompactTextString(m) }
func (*PipeRequest) ProtoMessage()               {}
func (*PipeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PipeRequest) GetPacket() *Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

type PipeResponse struct {
	Version int32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Cmd     Cmd     `protobuf:"varint,2,opt,name=cmd,enum=runtime.Cmd" json:"cmd,omitempty"`
	Packet  *Packet `protobuf:"bytes,3,opt,name=packet" json:"packet,omitempty"`
}

func (m *PipeResponse) Reset()                    { *m = PipeResponse{} }
func (m *PipeResponse) String() string            { return proto.CompactTextString(m) }
func (*PipeResponse) ProtoMessage()               {}
func (*PipeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PipeResponse) GetPacket() *Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

type SpecializeRequest struct {
	CodePath   string `protobuf:"bytes,1,opt,name=codePath" json:"codePath,omitempty"`
	EntryPoint string `protobuf:"bytes,2,opt,name=entryPoint" json:"entryPoint,omitempty"`
}

func (m *SpecializeRequest) Reset()                    { *m = SpecializeRequest{} }
func (m *SpecializeRequest) String() string            { return proto.CompactTextString(m) }
func (*SpecializeRequest) ProtoMessage()               {}
func (*SpecializeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SpecializeResponse struct {
}

func (m *SpecializeResponse) Reset()                    { *m = SpecializeResponse{} }
func (m *SpecializeResponse) String() string            { return proto.CompactTextString(m) }
func (*SpecializeResponse) ProtoMessage()               {}
func (*SpecializeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type HealthzResponse struct {
	StatusCode int32 `protobuf:"varint,1,opt,name=statusCode" json:"statusCode,omitempty"`
}

func (m *HealthzResponse) Reset()                    { *m = HealthzResponse{} }
func (m *HealthzResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthzResponse) ProtoMessage()               {}
func (*HealthzResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*Empty)(nil), "runtime.Empty")
	proto.RegisterType((*Packet)(nil), "runtime.Packet")
	proto.RegisterType((*PipeRequest)(nil), "runtime.PipeRequest")
	proto.RegisterType((*PipeResponse)(nil), "runtime.PipeResponse")
	proto.RegisterType((*SpecializeRequest)(nil), "runtime.SpecializeRequest")
	proto.RegisterType((*SpecializeResponse)(nil), "runtime.SpecializeResponse")
	proto.RegisterType((*HealthzResponse)(nil), "runtime.HealthzResponse")
	proto.RegisterEnum("runtime.Cmd", Cmd_name, Cmd_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Internal service

type InternalClient interface {
	Pipe(ctx context.Context, in *PipeRequest, opts ...grpc.CallOption) (Internal_PipeClient, error)
	Specialize(ctx context.Context, in *SpecializeRequest, opts ...grpc.CallOption) (*SpecializeResponse, error)
	Healthz(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthzResponse, error)
}

type internalClient struct {
	cc *grpc.ClientConn
}

func NewInternalClient(cc *grpc.ClientConn) InternalClient {
	return &internalClient{cc}
}

func (c *internalClient) Pipe(ctx context.Context, in *PipeRequest, opts ...grpc.CallOption) (Internal_PipeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Internal_serviceDesc.Streams[0], c.cc, "/runtime.Internal/Pipe", opts...)
	if err != nil {
		return nil, err
	}
	x := &internalPipeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Internal_PipeClient interface {
	Recv() (*PipeResponse, error)
	grpc.ClientStream
}

type internalPipeClient struct {
	grpc.ClientStream
}

func (x *internalPipeClient) Recv() (*PipeResponse, error) {
	m := new(PipeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *internalClient) Specialize(ctx context.Context, in *SpecializeRequest, opts ...grpc.CallOption) (*SpecializeResponse, error) {
	out := new(SpecializeResponse)
	err := grpc.Invoke(ctx, "/runtime.Internal/Specialize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) Healthz(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := grpc.Invoke(ctx, "/runtime.Internal/Healthz", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Internal service

type InternalServer interface {
	Pipe(*PipeRequest, Internal_PipeServer) error
	Specialize(context.Context, *SpecializeRequest) (*SpecializeResponse, error)
	Healthz(context.Context, *Empty) (*HealthzResponse, error)
}

func RegisterInternalServer(s *grpc.Server, srv InternalServer) {
	s.RegisterService(&_Internal_serviceDesc, srv)
}

func _Internal_Pipe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PipeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InternalServer).Pipe(m, &internalPipeServer{stream})
}

type Internal_PipeServer interface {
	Send(*PipeResponse) error
	grpc.ServerStream
}

type internalPipeServer struct {
	grpc.ServerStream
}

func (x *internalPipeServer) Send(m *PipeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Internal_Specialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).Specialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime.Internal/Specialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).Specialize(ctx, req.(*SpecializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime.Internal/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).Healthz(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Internal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "runtime.Internal",
	HandlerType: (*InternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Specialize",
			Handler:    _Internal_Specialize_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _Internal_Healthz_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pipe",
			Handler:       _Internal_Pipe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("internal.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0x6f, 0xda, 0xa6, 0x69, 0xdf, 0xd6, 0x6c, 0x1d, 0x2a, 0x84, 0x08, 0xa5, 0xe4, 0x62, 0xf5,
	0x50, 0xb4, 0x22, 0x9e, 0xd7, 0xb8, 0xa8, 0x20, 0x6c, 0x98, 0x7a, 0xf1, 0x22, 0x8e, 0x99, 0x07,
	0x3b, 0x98, 0xcc, 0xcc, 0x26, 0xd3, 0x85, 0xee, 0xd7, 0xf3, 0x8b, 0x49, 0x92, 0xe9, 0xb4, 0x54,
	0x11, 0x8f, 0xbf, 0x37, 0x8f, 0xdf, 0xbf, 0x79, 0x10, 0x0a, 0x69, 0xb0, 0x92, 0xac, 0x58, 0xeb,
	0x4a, 0x19, 0x45, 0x82, 0x6a, 0x27, 0x8d, 0x28, 0x31, 0x09, 0xc0, 0xbf, 0x2e, 0xb5, 0xd9, 0x27,
	0xdf, 0x60, 0x94, 0xb1, 0xfc, 0x27, 0x1a, 0x32, 0x07, 0xdf, 0x28, 0x2d, 0xf2, 0xc8, 0x5b, 0x7a,
	0xab, 0x09, 0xed, 0x40, 0x33, 0xc5, 0x7b, 0x94, 0x26, 0xea, 0x77, 0xd3, 0x16, 0x90, 0x10, 0xfa,
	0x82, 0x47, 0x83, 0xa5, 0xb7, 0xf2, 0x69, 0x5f, 0x70, 0x12, 0x41, 0xa0, 0xd9, 0xbe, 0x50, 0x8c,
	0x47, 0xc3, 0xa5, 0xb7, 0x9a, 0xd2, 0x03, 0x4c, 0xbe, 0xc3, 0x45, 0x26, 0x34, 0x52, 0xbc, 0xdb,
	0x61, 0x6d, 0x9a, 0xc5, 0x7b, 0xac, 0x6a, 0xa1, 0x64, 0x2b, 0xe3, 0xd3, 0x03, 0xb4, 0x94, 0x9d,
	0x4a, 0x43, 0xf9, 0x0c, 0x46, 0xba, 0x35, 0xd6, 0xca, 0x5c, 0x6c, 0x2e, 0xd7, 0xd6, 0xfb, 0xba,
	0xf3, 0x4b, 0xed, 0x73, 0x72, 0x07, 0xd3, 0x4e, 0xa1, 0xd6, 0x4a, 0xd6, 0xf8, 0x0f, 0x89, 0x05,
	0x0c, 0xf2, 0xb2, 0xd3, 0x08, 0x37, 0x53, 0xc7, 0x97, 0x96, 0x9c, 0x36, 0x0f, 0xff, 0x2f, 0x79,
	0x03, 0x8f, 0xb7, 0x1a, 0x73, 0xc1, 0x0a, 0xf1, 0xe0, 0xa2, 0xc5, 0x30, 0xce, 0x15, 0xc7, 0x8c,
	0x99, 0x5b, 0x5b, 0xa1, 0xc3, 0x64, 0x01, 0x80, 0xd2, 0x54, 0xfb, 0x4c, 0x09, 0x57, 0xe5, 0xc9,
	0x24, 0x99, 0x03, 0x39, 0x25, 0xec, 0x92, 0x24, 0xaf, 0xe0, 0xf2, 0x23, 0xb2, 0xc2, 0xdc, 0x3e,
	0xb8, 0x70, 0x0b, 0x80, 0xda, 0x30, 0xb3, 0xab, 0x53, 0xc5, 0xd1, 0xe6, 0x3b, 0x99, 0xbc, 0x78,
	0x0e, 0x83, 0xb4, 0xe4, 0x64, 0x0c, 0xc3, 0x2d, 0x4a, 0x3e, 0xeb, 0x91, 0x09, 0xf8, 0xf4, 0x3a,
	0xfb, 0xfc, 0x75, 0xe6, 0x91, 0x47, 0x30, 0x79, 0x47, 0x6f, 0xae, 0xde, 0xa7, 0x57, 0xdb, 0x2f,
	0xb3, 0xfe, 0xe6, 0x97, 0x07, 0xe3, 0x4f, 0xf6, 0x3c, 0xc8, 0x5b, 0x18, 0x36, 0x25, 0x92, 0xf9,
	0x31, 0xf2, 0xf1, 0xd7, 0xe2, 0x27, 0x67, 0x53, 0xeb, 0xaf, 0xf7, 0xd2, 0x23, 0x1f, 0x00, 0x8e,
	0xce, 0x49, 0xec, 0x16, 0xff, 0xe8, 0x27, 0x7e, 0xfa, 0xd7, 0xb7, 0x03, 0x15, 0x79, 0x03, 0x81,
	0x0d, 0x4b, 0x42, 0xb7, 0xd9, 0xde, 0x68, 0x1c, 0x39, 0x7c, 0x56, 0x47, 0xd2, 0xfb, 0x31, 0x6a,
	0x0f, 0xfb, 0xf5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xcd, 0xdd, 0xc5, 0xea, 0x02, 0x00,
	0x00,
}
